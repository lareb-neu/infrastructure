AWSTemplateFormatVersion: 2010-09-09

Description: This template creates vpc and subnets for it


Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"

  subnet01:
    Description: "IP address for public subnet 1"
    Type: String
    Default: "10.0.0.0/24"

  subnet02:
    Description: "IP address for public subnet 1"
    Type: String
    Default: "10.0.1.0/24"

  subnet03:
    Description: "IP address for public subnet 1"
    Type: String
    Default: "10.0.2.0/24"

  EBSRootVolumeType:
    Description: Volume type for EBS
    Type: String
    Default: gp2
  EBSRootVolumeSize:
    Description: Volume size for EBS
    Type: Number
    Default: 50
  EBSinstanceType:
    Description: Instance type for EBS
    Type: String
    Default: t2.micro
  amiId: 
    Description: ID for the ami built
    Type: String

  PrivateSubnet01:
    Description: IP address for private subnet 01
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet02:
    Description: IP address for private subnet 02
    Type: String
    Default: 10.0.4.0/24
  PrivateSubnet03:
    Description: IP address for private subnet 03
    Type: String
    Default: 10.0.5.0/24
  SshKeyPairName:
    Description: The SSH key name required for login using SSH
    Type: String
    Default: aws-02
  s3Bucket:
    Description: S3 Bucket Name
    Type: String
    Default: csye6225larebkhans3
  DbName:
    Description: Database Instance Name
    Type: String
    Default: csye6225 
  DbUsername:
    Description: Database Instance UserName
    Type: String
    Default: csye6225
  DbPassword:
    Description: Database Instance Password
    Type: String
    Default: lareb1996
  EnvironmentName:
    Description: Name given for the environment here its dev
    Type: String
    Default: dev  

  DNSDomain:
    Description: Domain name for EC2
    Type: String
    Default: larebkhan.me.

  SNSTopicName:
    Description: Name of SNS Topic
    Type: String
    Default: user_verification
  
  TTL:
    Description: Time to Live
    Type: String
    Default: 5


Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Test VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
   
    Properties:
      Tags:
        - Key: Name
          Value: Test IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
  
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC

  mySubnet01:
    Type: AWS::EC2::Subnet
    
    Properties:
      AvailabilityZone: !Select [0,!GetAZs '']
      CidrBlock: !Ref subnet01
      MapPublicIpOnLaunch: true
      
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref myVPC
    
  mySubnet02:
    Type: AWS::EC2::Subnet
    
    Properties:
      AvailabilityZone: !Select [1 ,!GetAZs '']
      CidrBlock: !Ref subnet02
      MapPublicIpOnLaunch: true
      
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref myVPC
  
  mySubnet03:
    Type: AWS::EC2::Subnet
    
    Properties:
      AvailabilityZone: !Select [2 ,!GetAZs '']
      CidrBlock: !Ref subnet03
      MapPublicIpOnLaunch: true
      
      Tags:
        - Key: Name
          Value: Public Subnet 3
      VpcId: !Ref myVPC

  myPrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet01
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 01

  myPrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet02
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 02

  myPrivateSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet03
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 03


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    
    Properties:
      Tags:
        - Key: Name 
          Value: Public Route Table
      VpcId: !Ref myVPC

  PublicRoute:
    Type: AWS::EC2::Route
    
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet01
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet02

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet03

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref myPrivateSubnet01

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref myPrivateSubnet02

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref myPrivateSubnet03

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for RDS instances
      SubnetIds:
        - !Ref myPrivateSubnet01
        - !Ref myPrivateSubnet02
        - !Ref myPrivateSubnet03

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: applicationSecurityGroup
      GroupDescription: EC2 Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '2000'
          ToPort: '2000'
          CidrIp: 0.0.0.0/0

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: database
      GroupDescription: EC2 security group for RDS instances
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432

  

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref s3Bucket,'-',!Ref EnvironmentName,!Ref AWS::StackName ]]
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration:
        Rules:
          - Id: LifeCycleRule
            Status: Enabled
            ExpirationInDays: 60
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
            

  AmazonRDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: RDS parameter Group
      Family: postgres13
      Tags: 
        - Key: RDS-ParameterGroup
          Value: Postgres-ParameterGroup


  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Engine: postgres
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: !Ref DbName
      MasterUsername: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      DBSubnetGroupName: !Ref DbSubnetGroup
      PubliclyAccessible: false
      DBName: !Ref DbName
      DBParameterGroupName: !Ref AmazonRDSParameterGroup
      VPCSecurityGroups:
        - !Ref DbSecurityGroup

  InstanceOfBuiltAMI:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sdm  
          Ebs:
            VolumeSize: !Ref EBSRootVolumeSize
            VolumeType: !Ref EBSRootVolumeType
            DeleteOnTermination: true
      InstanceType: !Ref EBSinstanceType
      ImageId: !Ref amiId
      KeyName: !Ref SshKeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref AppSecurityGroup
      SubnetId: !Ref mySubnet01
      Tags:
        - Key: EC2
          Value: ApplicationServer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update
          cd /home/ubuntu/webapp
          touch db_creds.py
          echo "host='${RDSInstance.Endpoint.Address}'" >> /home/ubuntu/webapp/db_creds.py
          echo "port='${RDSInstance.Endpoint.Port}'" >> /home/ubuntu/webapp/db_creds.py
          echo "db_name='${DbName}'" >> /home/ubuntu/webapp/db_creds.py
          echo "username='${DbUsername}'" >> /home/ubuntu/webapp/db_creds.py
          echo "password='${DbPassword}'" >> /home/ubuntu/webapp/db_creds.py
          echo "s3bucketname='${s3Bucket}-${EnvironmentName}${AWS::StackName}'" >> /home/ubuntu/webapp/db_creds.py
          echo "aws_region='${AWS::Region}'" >> /home/ubuntu/webapp/db_creds.py
          echo "topic_arn='arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicName}'" >> /home/ubuntu/webapp/db_creds.py
          echo "TimeToLive='${TTL}'" >> /home/ubuntu/webapp/db_creds.py
          sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -c file:/home/ubuntu/webapp/cloudwatch-config.json \
              -s
          sudo systemctl daemon-reload
          sudo systemctl start gunicorn
          sudo systemctl enable gunicorn
          sudo systemctl start nginx
          sudo systemctl enable nginx
          sudo service start amazon-cloudwatch-agent 
          sudo systemctl enable amazon-cloudwatch-agent.service

  WebappS3IamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
              - 's3:PutObjectAcl'
              - 's3:PutObjectTagging'
            Resource: 
              - !Join ['', [!GetAtt 'S3Bucket.Arn']]
              - !Join ['', [!GetAtt 'S3Bucket.Arn','/*' ]]
      Roles:
      - !Ref WebappS3IamRole

  WebappS3IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-CSYE6225
      Description: IAM Role for WebApp and S3 bucket
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      


  EC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Roles:
      - !Ref WebappS3IamRole


  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      #HostedZoneName: dev.larebkhan.me
      HostedZoneName: !Join ['', [!Ref EnvironmentName,'.',!Ref DNSDomain]]
      Name: !Join ['', [!Ref EnvironmentName,'.',!Ref DNSDomain]]
      Type: A
      TTL: '60'
      ResourceRecords:
      - !GetAtt 'InstanceOfBuiltAMI.PublicIp'


  CloudWatchAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "EC2CloudWatchPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
            Resource: "*"
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
              - 'ssm:PutParameter'
            Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
      Roles:
        - Ref: WebappS3IamRole


  SNSservice:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref SNSTopicName
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      TopicName: !Ref SNSTopicName

  SNStopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Publish
          - SNS:DeleteTopic
          - SNS:ListSubscriptionsByTopic
          - SNS:GetTopicAttributes
          - SNS:Receive
          - SNS:AddPermission
          - SNS:Subscribe
          Resource:
            Ref: SNSservice
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref AWS::AccountId
        - Sid: __console_pub_0
          Effect: Allow
          Principal:
            AWS: "*"
          Action: SNS:Publish
          Resource:
            Ref: SNSservice
        - Sid: __console_sub_0
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Subscribe
          - SNS:Receive
          Resource:
            Ref: SNSservice
      Topics:
      - Ref: SNSservice

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SNSservice

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: verifyEmail
      Role:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - !Ref AWS::AccountId
          - ":role/"
          - !Ref LambdaRole
      Runtime: python3.7
      Handler: index.handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return True
      Description: Function to store token in dynamodb and send email to SNS

  myLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Lambda-SES-SNS-DynamoDBpolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource:
              - !GetAtt DynamodbTable.Arn
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource:
              - "arn:aws:ses:us-east-1:620068443483:identity/*"
          - Effect: Allow
            Action:
              - sns:ConfirmSubscription
            Resource:
              - !Ref SNSservice

      Roles:
        - !Ref LambdaRole

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "LambdaFunctionRole"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "Email"
          AttributeType: "S"
        - 
          AttributeName: "TokenName"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "Email"
          KeyType: "HASH"
        - 
          AttributeName: "TokenName"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: csye-6225
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      Tags:
        - Key: key
          Value: value

  myEmailTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sent-emails
      AttributeDefinitions:
        - 
          AttributeName: emailadd
          AttributeType: S
      KeySchema:
        - 
          AttributeName: emailadd
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  DynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:List*'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeTimeToLive'
            Resource: 
              - '*'
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:Delete*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:BatchGet*'
            Resource:
              - !GetAtt DynamodbTable.Arn
      Roles:
        - !Ref WebappS3IamRole